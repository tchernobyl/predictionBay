import numpy as np


/*const data = [
  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60],
  [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80],
  [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],
  [6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120],
  [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140],
  [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160],
  [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180],
  [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],
  [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220],
  [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240] ]
*/


# conversion csv --> json

const csv = `data ;

function csvToJson(csvData) {
  const lines = csvData.trim().split('\n');
  const headers = lines[0].split(',');
  const jsonData = [];

  for (let i = 1; i < lines.length; i++) {
    const currentLine = lines[i].split(',');
    const entry = {};

    for (let j = 0; j < headers.length; j++) {
      entry[headers[j]] = currentLine[j];
    }

    jsonData.push(entry);
  }

  return JSON.stringify(jsonData);
}

const json = csvToJson(csv);
console.log(json);



# NORMALISATION DES DONNEES 

function normalizeData(data) {
  const normalizedData = [];
  const numColumns = data[0].length;

  for (let i = 0; i < numColumns; i++) {
    const column = data.map(row => row[i]);
    const min = Math.min(...column);
    const max = Math.max(...column);

    const normalizedColumn = column.map(value => (value - min) / (max - min));
    normalizedData.push(normalizedColumn);
  }

  return transpose(normalizedData);
}







# diviser les données en test et train 
const trainRatio = 0.7; // Ratio pour l'ensemble d'entraînement
const trainSize = Math.round(data.length * trainRatio);

const trainData = data.slice(0, trainSize);
const testData = data.slice(trainSize);

console.log("Données d'entraînement :", trainData);
console.log("Données de test :", testData);



from sklearn.linear_model import LinearRegression

# Données d'entraînement
X_train = trainData


# Initialisation du modèle
model = LinearRegression()

# Entraînement du modèle
model.fit(X_train)

# Données de test
X_test = testData

# Prédiction
y_pred = model.predict(X_test)

# Affichage des résultats
for x, y in zip(X_test, y_pred):
    print(f"Input: {x[0]}, Predicted Output: {y}")







